[{"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/index.tsx":"1","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/reportWebVitals.ts":"2","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/App.tsx":"3","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/render.tsx":"4","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/StartEvent.tsx":"5","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/ExclusiveGateway.tsx":"6","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/EndEvent.tsx":"7","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/Task.tsx":"8","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/SequenceFlow.tsx":"9","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/util.ts":"10"},{"size":500,"mtime":1611281590958,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611281590959,"results":"13","hashOfConfig":"12"},{"size":4612,"mtime":1611731850592,"results":"14","hashOfConfig":"12"},{"size":1266,"mtime":1611732148174,"results":"15","hashOfConfig":"12"},{"size":798,"mtime":1611731190982,"results":"16","hashOfConfig":"12"},{"size":620,"mtime":1611652907671,"results":"17","hashOfConfig":"12"},{"size":355,"mtime":1611731204411,"results":"18","hashOfConfig":"12"},{"size":815,"mtime":1611730469350,"results":"19","hashOfConfig":"12"},{"size":5284,"mtime":1611732579541,"results":"20","hashOfConfig":"12"},{"size":854,"mtime":1611732261502,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"jx2oe9",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/index.tsx",[],["47","48"],"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/reportWebVitals.ts",[],"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/App.tsx",["49","50","51","52"],"// disable-eslint\nimport React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport BpmnModdle from \"bpmn-moddle\";\nimport render from \"./render\";\nimport { Popover } from \"antd\";\n// import bpmn from './duban.bpmp'\nimport \"antd/dist/antd.css\";\nconst moddle = new BpmnModdle();\n\n// var reader = new FileReader();\n// reader.readAsText(bpmn);\n// reader.onloadend = function () {\n//   var xmlData = reader.result;\n//   moddle\n//     .fromXML(xmlData as string, (res) => {\n//       console.log(res);\n//     })\n//     //@ts-ignore\n//     .then((res) => {\n//       console.log(\"233\", res);\n//       setLoad(res.rootElement.rootElements);\n//     });\n// };\n\n// 出现内环时，需要记录绘制过的元素，不然会栈溢出\nconst done: any = {};\nlet END: any = {};\n\nexport const TEM: any = {};\n\nexport const drawNode = ({ node, ...rest }: any): any => {\n  console.log(node);\n  if (!node || !node.$type) return;\n  const { $type, id, name, outgoing, targetRef, sourceRef } = node;\n  const { setEnd } = rest;\n\n  // 不绘制的元素，仅用于存储指针的点\n  if (name === \"unless\") {\n    return drawNode({ node: outgoing[0]?.targetRef, ...rest });\n  }\n  // 重复元素排除\n  // if (done[id]) return null;\n  // done[id] = true;\n  // if ($type === \"bpmn:SequenceFlow\") {\n  //   // 如果是网关后面的 SequenceFlow 需要绘制出来\n  //   if (sourceRef.$type === \"bpmn:ExclusiveGateway\") {\n  //     return [\n  //       render.handler($type, node, rest),\n  //       drawNode({ node: targetRef, ...rest }),\n  //     ];\n  //   }\n  //   return drawNode({ node: targetRef, ...rest });\n  // }\n  // end 节点特殊对待,要渲染在最后\n  if ($type === \"bpmn:EndEvent\") {\n    console.log($type, node);\n\n    setEnd(node);\n    return;\n  }\n  return [\n    render.handler($type, node, rest),\n    (() => {\n      if ($type === \"bpmn:ExclusiveGateway\") {\n        return (\n          <div className=\"branch\">\n            <div style={{ display: \"flex\" }}>\n              {outgoing?.map((item: any) => (\n                <div className=\"wrap\">{drawNode({ node: item, ...rest })}</div>\n              ))}\n            </div>\n\n            <div className=\"line\"></div>\n            <Popover\n              content={\n                <div onClick={undefined}>\n                  <div data-type=\"append\">审批人</div>\n                  <div data-type=\"cc\">抄送人</div>\n                  <div data-type=\"condition\">条件分支</div>\n                </div>\n              }\n              title=\"null\"\n              trigger=\"click\"\n            >\n              <div>+</div>\n            </Popover>\n            <div className=\"line\"></div>\n          </div>\n        );\n      } else {\n        return (outgoing || [targetRef])?.map((item: any) =>\n          drawNode({ node: item, ...rest })\n        );\n      }\n    })(),\n  ];\n};\n\n// tree 结构\nfunction App() {\n  const [content, setContent] = useState<any>(null);\n  const [parent, setParent] = useState<any>();\n  const [end, setEnd] = useState<any>();\n\n  useEffect(() => {\n    if (!parent) return;\n    const start = parent.flowElements.find(\n      (item: any) => item.$type === \"bpmn:StartEvent\"\n    );\n    setContent(drawNode({ node: start, setParent, setEnd, end }));\n  }, [parent, setContent, setParent, end]);\n\n  console.log(\"END\", end);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          type=\"file\"\n          accept=\".bpmn\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            if (!e.target?.files) return;\n            let file = e.target?.files[0];\n            var reader = new FileReader();\n            reader.readAsText(file);\n            reader.onloadend = function () {\n              var xmlData = reader.result;\n              moddle\n                // @ts-ignore\n                .fromXML(xmlData as string)\n                //@ts-ignore\n                .then((res) => {\n                  TEM.elementsById = res.elementsById;\n                  console.log(\"response\", res);\n                  setParent(res.rootElement.rootElements[0]);\n                });\n            };\n          }}\n        />\n        {content}\n        {end?.$type ? render.handler(end.$type, end) : null}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/render.tsx",["53"],"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/StartEvent.tsx",["54","55","56","57","58","59","60","61","62"],"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/ExclusiveGateway.tsx",["63"],"import React, { memo } from \"react\";\n\ninterface IProps {\n  node: any;\n}\n\nconst ExclusiveGateway: React.FC<IProps> = memo(({ node }) => {\n  const { id, name } = node;\n  const addCondition = () => {\n    // 当前分支节点到 end 节点\n  };\n\n  return (\n    <div id={id}>\n      <div className=\"line\"></div>\n      <div className=\"node gateway\">\n        <div className=\"content\" onClick={addCondition}>\n          <div> 添加条件</div>\n        </div>\n      </div>\n      <div className=\"line\"></div>\n\n      <div className=\"line\"></div>\n    </div>\n  );\n});\n\nexport default ExclusiveGateway;\n","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/EndEvent.tsx",["64"],"/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/Task.tsx",["65","66","67","68","69","70","71","72","73"],"import React, { memo } from \"react\";\nimport \"./index.css\";\nimport { Popover, Button } from \"antd\";\nimport BpmnModdle from \"bpmn-moddle\";\nimport update from \"immutability-helper\";\nimport { drawNode } from \"../App\";\nimport { uuid, findEndLast, next } from \"../util\";\n\nconst moddle = new BpmnModdle();\n\ntype NodeType = \"append\" | \"cc\" | \"condition\";\ninterface IProps {\n  name: string;\n  id: string;\n  node?: any;\n  setParent?: any;\n}\n\nconst StartEvent: React.FC<IProps> = memo(({ name, id, node, setParent }) => {\n  // 特别类型支持添加条件\n\n  return (\n    <div id={id}>\n      <div className=\"line\"></div>\n      <div className=\"node\">\n        <div className=\"content\">\n          <div> {name}</div>\n        </div>\n      </div>\n      <div className=\"line\"></div>\n    </div>\n  );\n});\n\nexport default StartEvent;\n","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/nodes/SequenceFlow.tsx",["74","75","76","77","78","79","80","81"],"import React, { memo } from \"react\";\nimport \"./index.css\";\nimport { Popover, Button, Divider } from \"antd\";\nimport BpmnModdle from \"bpmn-moddle\";\nimport update from \"immutability-helper\";\nimport { drawNode } from \"../App\";\nimport { uuid, findEndLast, next } from \"../util\";\n\nconst moddle = new BpmnModdle();\n\ntype NodeType = \"append\" | \"cc\" | \"condition\";\ninterface IProps {\n  name: string;\n  id: string;\n  node?: any;\n  setParent?: any;\n}\n\nconst SequenceFlow: React.FC<IProps> = memo(\n  ({ name, id, node, setParent, ...rest }) => {\n    const { conditionExpression } = node;\n    const addNode = (e: any) => {\n      // 需要 endNode 的索引\n      // 支持添加 审批人|抄送人|条件分支\n      const type = e.target.dataset.type;\n      console.log(type);\n\n      switch (type) {\n        // 添加审批人\n        case \"append\":\n          var userTask = moddle.create(\"bpmn:UserTask\", {\n            id: uuid(\"UserTask\"),\n            name: \"审批人\",\n          });\n          const SequenceFlow = moddle.create(\"bpmn:SequenceFlow\", {\n            id: uuid(\"SequenceFlow\"),\n            sourceRef: userTask,\n            targetRef: node.targetRef,\n          });\n          userTask.outgoing = [SequenceFlow];\n          userTask.incoming = [node];\n\n          node.targetRef.incoming = [SequenceFlow];\n          node.targetRef = userTask;\n\n          // @TIP 使用 update 不会继承原型上的属性\n          // const newContent = update(node, {\n          //   outgoing: {\n          //     $splice: [[0, 1, userTask]],\n          //   },\n          // });\n          // console.log(\"update后\", newContent);\n\n          // @TIP set 相同对象不会出发更新\n          break;\n        // 添加条件\n        case \"condition\":\n          // 在此处添加网关，\n          /* 为便于查询，添加条件时，会绑定此次网关的分支结束点，方便之后在分支结束点添加节点 */\n          const unlessNodeId = uuid(\"ManualTask\");\n          var end = moddle.create(\"bpmn:ManualTask\", {\n            id: unlessNodeId,\n            name: \"unless\",\n          });\n          var gateway = moddle.create(\"bpmn:ExclusiveGateway\", {\n            id: uuid(\"ExclusiveGateway\"),\n            name: \"添加条件\",\n            $attr: { endWay: unlessNodeId },\n          });\n          var condition1 = moddle.create(\"bpmn:SequenceFlow\", {\n            id: uuid(\"SequenceFlow\"),\n            name: \"设置条件\",\n            sourceRef: gateway,\n            targetRef: node.targetRef,\n            conditionExpression: moddle.create(\"bpmn:FormalExpression\", {\n              body: \"${ foo < bar }\",\n            }),\n          });\n          var condition2 = moddle.create(\"bpmn:SequenceFlow\", {\n            id: uuid(\"SequenceFlow\"),\n            name: \"设置条件\",\n            sourceRef: gateway,\n            targetRef: end,\n            conditionExpression: moddle.create(\"bpmn:FormalExpression\", {\n              body: \"${ foo < bar }\",\n            }),\n          });\n          // 起点转换\n          gateway.incoming = [node];\n          gateway.outgoing = [condition1, condition2];\n          node.targetRef = gateway;\n\n          condition1.targetRef.incoming = [condition1];\n\n          // 终点转换\n          const endLast = findEndLast(node); // endLast 应该是个 bpmn:SequenceFlow\n          const endNext = endLast.targetRef;\n\n          const flow = moddle.create(\"bpmn:SequenceFlow\", {\n            id: uuid(\"SequenceFlow\"),\n            sourceRef: end,\n            targetRef: endNext,\n          });\n\n          end.incoming = [endLast, condition2];\n          end.outgoing = [flow];\n\n          const idx = endNext.incoming.findIndex(\n            (item: any) => item === endLast\n          );\n          endNext.incoming.splice(idx, 1, flow);\n          endLast.targetRef = end;\n          break;\n        // 添加抄送人,本质和 审批人的逻辑一致\n        case \"cc\": {\n          const ccTask = moddle.create(\"bpmn:UserTask\", {\n            id: uuid(\"UserTask\"),\n            name: \"抄送人\",\n          });\n          const SequenceFlow = moddle.create(\"bpmn:SequenceFlow\", {\n            id: uuid(\"SequenceFlow\"),\n            sourceRef: ccTask,\n            targetRef: node.targetRef,\n          });\n          ccTask.outgoing = [SequenceFlow];\n          ccTask.incoming = [node];\n\n          node.targetRef.incoming = [SequenceFlow];\n          node.targetRef = ccTask;\n        }\n      }\n\n      // 触发渲染更新\n      setParent({ ...node.$parent });\n    };\n\n    // 特别类型支持添加条件\n\n    return (\n      <div id={id}>\n        <div className=\"line\"></div>\n        {/* 条件语句的 flow 需要渲染条件内容 */}\n        {conditionExpression\n          ? [\n              <div>{conditionExpression.body}</div>,\n              <div className=\"line\"></div>,\n            ]\n          : null}\n        <Popover\n          content={\n            <div onClick={addNode}>\n              <div data-type=\"append\">审批人</div>\n              <div data-type=\"cc\">抄送人</div>\n              <div data-type=\"condition\">条件分支</div>\n            </div>\n          }\n          title=\"null\"\n          trigger=\"click\"\n        >\n          <div>+</div>\n        </Popover>\n        <div className=\"line\"></div>\n      </div>\n    );\n  }\n);\n\nexport default SequenceFlow;\n","/Users/anshi/workPlace/OA/bpmn-demo/bpmn-test/src/util.ts",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":28,"column":7,"nodeType":"88","messageId":"89","endLine":28,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":29,"column":5,"nodeType":"88","messageId":"89","endLine":29,"endColumn":13},{"ruleId":"86","severity":1,"message":"91","line":36,"column":18,"nodeType":"88","messageId":"89","endLine":36,"endColumn":20},{"ruleId":"86","severity":1,"message":"92","line":36,"column":49,"nodeType":"88","messageId":"89","endLine":36,"endColumn":58},{"ruleId":"86","severity":1,"message":"93","line":11,"column":13,"nodeType":"88","messageId":"89","endLine":11,"endColumn":23},{"ruleId":"86","severity":1,"message":"94","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"95","line":3,"column":19,"nodeType":"88","messageId":"89","endLine":3,"endColumn":25},{"ruleId":"86","severity":1,"message":"96","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"97","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":18},{"ruleId":"86","severity":1,"message":"98","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"99","line":7,"column":16,"nodeType":"88","messageId":"89","endLine":7,"endColumn":27},{"ruleId":"86","severity":1,"message":"100","line":7,"column":29,"nodeType":"88","messageId":"89","endLine":7,"endColumn":33},{"ruleId":"86","severity":1,"message":"101","line":9,"column":7,"nodeType":"88","messageId":"89","endLine":9,"endColumn":13},{"ruleId":"86","severity":1,"message":"102","line":11,"column":6,"nodeType":"88","messageId":"89","endLine":11,"endColumn":14},{"ruleId":"86","severity":1,"message":"103","line":8,"column":15,"nodeType":"88","messageId":"89","endLine":8,"endColumn":19},{"ruleId":"86","severity":1,"message":"103","line":9,"column":15,"nodeType":"88","messageId":"89","endLine":9,"endColumn":19},{"ruleId":"86","severity":1,"message":"94","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"95","line":3,"column":19,"nodeType":"88","messageId":"89","endLine":3,"endColumn":25},{"ruleId":"86","severity":1,"message":"96","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"97","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":18},{"ruleId":"86","severity":1,"message":"98","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":14},{"ruleId":"86","severity":1,"message":"99","line":7,"column":16,"nodeType":"88","messageId":"89","endLine":7,"endColumn":27},{"ruleId":"86","severity":1,"message":"100","line":7,"column":29,"nodeType":"88","messageId":"89","endLine":7,"endColumn":33},{"ruleId":"86","severity":1,"message":"101","line":9,"column":7,"nodeType":"88","messageId":"89","endLine":9,"endColumn":13},{"ruleId":"86","severity":1,"message":"102","line":11,"column":6,"nodeType":"88","messageId":"89","endLine":11,"endColumn":14},{"ruleId":"86","severity":1,"message":"95","line":3,"column":19,"nodeType":"88","messageId":"89","endLine":3,"endColumn":25},{"ruleId":"86","severity":1,"message":"104","line":3,"column":27,"nodeType":"88","messageId":"89","endLine":3,"endColumn":34},{"ruleId":"86","severity":1,"message":"96","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":14},{"ruleId":"86","severity":1,"message":"97","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":18},{"ruleId":"86","severity":1,"message":"100","line":7,"column":29,"nodeType":"88","messageId":"89","endLine":7,"endColumn":33},{"ruleId":"86","severity":1,"message":"102","line":11,"column":6,"nodeType":"88","messageId":"89","endLine":11,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":76,"column":21,"nodeType":"107","messageId":"108","endLine":76,"endColumn":37},{"ruleId":"105","severity":1,"message":"106","line":85,"column":21,"nodeType":"107","messageId":"108","endLine":85,"endColumn":37},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'done' is assigned a value but never used.","Identifier","unusedVar","'END' is assigned a value but never used.","'id' is assigned a value but never used.","'sourceRef' is assigned a value but never used.","'setContent' is assigned a value but never used.","'Popover' is defined but never used.","'Button' is defined but never used.","'update' is defined but never used.","'drawNode' is defined but never used.","'uuid' is defined but never used.","'findEndLast' is defined but never used.","'next' is defined but never used.","'moddle' is assigned a value but never used.","'NodeType' is defined but never used.","'name' is assigned a value but never used.","'Divider' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation"]